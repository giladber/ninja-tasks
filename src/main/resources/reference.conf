
ninja {
    extractor {

        # The initial delay before the job extractor actor begins sending capacity requests.
        # Units: Milliseconds
        initial-delay = 500

        # Time period between each two capacity requests by the extractor.
        # Units: Milliseconds
        periodic-delay = 1000

        # Capacity request timeout, for requests sent by the job extractor.
        # Units: Milliseconds
        request-timeout = 500
    }

    delegator {
        # Maximum capacity of the job queue. Beyond this capacity, a work's job creator will be sent to a wait queue,
        # from which its jobs will lazily be created when free space is available.
        # The purpose of this mechanism is to avoid high memory consumption by the job management subsystem.
        job-queue-length = 1E5
    }

    registration {
        # Initial delay before the first subscription request is sent by topic aware actors.
        # This affects the time it takes before work objects can be sent for processing after
        # the ninja-tasks framework has started, however this phase should usually not take more than 5
        # seconds, at maximum worse behavior.
        # Units: Milliseconds
        subscription-req-initial-delay = 2000

        # Time delta before a subscription request is sent by a topic aware actor to itself, after being published
        # to other components. This phase happens while waiting to receive a registration ack from other components.
        # The purpose of this delay is to ensure that the other components had enough time to respond
        # to the previous registration request, and to initiate a new round of requests.
        # Units: Milliseconds
        subscription-self-req-delta = 1000

        # Time delta between receiving a self-subscription request and initiating a new round of registration
        # requests to be published to other components. This is relevant only to topic aware actors.
        # Units: Milliseconds
        subscription-retry-delay = 2000
    }

    workers {
        # By default the amount of workers is not given in the configuration, but rather should be
        # configured by the user in his outside configuration.
        # If this value is missing from the configuration, instead a greedy worker is assumed and
        # this value will default to Runtime.getRuntime().availableProcessors()
        #amount = 2
    }

    work-manager {
        # Maximum number of work objects which may wait execution at a single point in time.
        # Beyond this threshold, sent work objects will be rejected without regards to their priority,
        # requiring their sender to send them again at a later time.
        max-work-queue-size = 1E3

        # Number of actors dedicated to performing combine operations.
        # Note that since combine operations may be CPU consuming (although the documentation advises against it),
        # it may not be a smart choice to increase this number, more so on systems with a low number of logical cores.
        num-combiners = 1
    }

    work {
        # The default priority value given to work objects submitted without
        # being assigned an explicit priority.
        default-priority = 5
    }
}